//*функции конструкторы при вызове которых создается новая сущность/объект

//! встроенные конструкторы
const str = new String('asdasd');
console.log(str)

//*собственный конструктор
function Product(brand, price, discount) {//*наименование классов и функций конструктор начинается с заглавной буквы
  console.log(this);
  //1. создается новый объект
  //2. на этот объект устанавливается ссылка this
  //3. возвращает объект

  this.brand = brand;
  this.price = price;
  this.discount = discount;
  this.getPriceWithDiscound = function() {
    return (this.price * (100 - this.discount)) / 100;
  }
}

const apple = new Product('apple', 100, 15);
console.log(apple);

//*при добавлении new внутри нашей функции product создается пустой объект и привязывается к ключевому слову this. мы можем добавлять в него свойства или методы, после чего функция возвращает созданный нами объект

// *это можно расценивать как шаблон для создания объектов
const samsung =  new Product('samsung', 200, 25);
console.log(samsung == apple); //*создаются разные объекты
console.log(apple.getPriceWithDiscound());
console.log(samsung.getPriceWithDiscound());

//*class(функции конструкторы) - собственный тип данных для объектов. Т.е. мы разделяем наши объект на определенные сущности и описываем эти сущности в форме объекта. Они имеют свои наборы свойств и методов для работы с экземплярами класса. Экземплярами класса являются порожденные объекты от этого класса

//* в es6 появилась функция для работы с классами(синтаксический сахар, под капотом все равно функция конструктор). Всё что выше синтаксис es5. 

console.log(apple instanceof Product)//*проверка, от чего был создан объект
